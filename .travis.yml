language: go
go_import_path: github.com/davidbyttow/govips

sudo: required
dist: trusty

go:
  - 1.9

env:
  global:
    - WEBP_VERSION=1.0.2
  matrix:
    - VIPS_VERSION=8.8.0

matrix:
  allow_failures:
    - env: VIPS_VERSION=8.2
    - env: VIPS_VERSION=8.3

cache:
  apt: true
  directories:
    - $HOME/libwebp
    - $HOME/libvips

addons:
  apt:
    packages:
      - gobject-introspection
      - gtk-doc-tools
      - libcfitsio3-dev
      - libfftw3-dev
      - libgif-dev
      - libgs-dev
      - libgsf-1-dev
      - libmatio-dev
      - libopenslide-dev
      - liborc-0.4-dev
      - libpango1.0-dev
      - libpoppler-glib-dev

# VIPS 8.8.0 requires libwebp 0.5 which is not released on Trusty.
before_install:
  - |
    cd $HOME/libwebp
    test -d libwebp-${WEBP_VERSION} && {
      cd libwebp-${WEBP_VERSION}
    } || {
      wget https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${WEBP_VERSION}.tar.gz
      tar xzf libwebp-${WEBP_VERSION}.tar.gz
      cd libwebp-${WEBP_VERSION}
      ./configure --enable-libwebpmux
      make
    }
    sudo make install
    sudo ldconfig
  - |
    cd $HOME/libvips
    test -d libvips-${VIPS_VERSION} && {
      cd libvips-${VIPS_VERSION}
    } || {
      wget https://github.com/libvips/libvips/archive/v${VIPS_VERSION}.zip
      unzip v${VIPS_VERSION}
      cd libvips-${VIPS_VERSION}
      test -f autogen.sh && ./autogen.sh || ./bootstrap.sh
      CXXFLAGS=-D_GLIBCXX_USE_CXX11_ABI=0 ./configure --disable-debug --disable-dependency-tracking --disable-introspection --disable-static --enable-gtk-doc-html=no --enable-gtk-doc=no --enable-pyvips8=no --without-orc --without-python $1
      make
    }
    sudo make install
    sudo ldconfig
  - cd $TRAVIS_BUILD_DIR

before_script:
  - go get -u github.com/golang/lint/golint

script:
  - |
    set -e
    diff -u <(echo -n) <(gofmt -s -d ./)
  - |
    set -e
    diff -u <(echo -n) <(go vet ./pkg/vips)
  - |
    set -e
    diff -u <(echo -n) <(golint ./)
  - |
    set -e
    for test in ./pkg/vips/*_test.go
    do
      echo $test
      go test $test -short -v -race -covermode=atomic -coverprofile=coverage.out
    done
